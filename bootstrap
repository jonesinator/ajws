#!/bin/bash

set -e

if [ "$#" -eq 0 ]; then
    while true; do
        read -p "Enter the device on which Arch Linux should be installed (e.g. /dev/sda): " DEVICE
        if [ -b "${DEVICE}" ]; then
            break
        else
            echo "Device \"${DEVICE}\" does not exist!"
        fi
    done

    while true; do
        read -p "Enter the desired hostname: " HOSTNAME
        if [ -n "${HOSTNAME}" ]; then
            break
        else
            echo "Hostname cannot be blank!"
        fi
    done

    while true; do
        read -s -p "Enter the desired root password: " ROOT_PASSWORD1
        echo ""
        read -s -p "Enter the desired root password again: " ROOT_PASSWORD2
        echo ""
        if [ "${ROOT_PASSWORD1}" == "${ROOT_PASSWORD2}" ]; then
            break
        else
            echo "Passwords do not match!"
        fi
    done

    while true; do
        read -p "Enter the desired non-root username: " USERNAME
        if [ -n "${USERNAME}" ]; then
            break
        else
            echo "Non-root username cannot be blank!"
        fi
    done

    while true; do
        read -s -p "Enter the desired non-root password: " USER_PASSWORD1
        echo ""
        read -s -p "Enter the desired non-root password again: " USER_PASSWORD2
        echo ""
        if [ "${USER_PASSWORD1}" == "${USER_PASSWORD2}" ]; then
            break
        else
            echo "Passwords do not match!"
        fi
    done

    while true; do
        read -p "Enter the desired country (e.g. US): " COUNTRY
        if [ -n "${COUNTRY}" ]; then
            break
        else
            echo "Country cannot be blank!"
        fi
    done

    while true; do
        read -p "Enter the desired timezone path (e.g. /usr/share/zoneinfo/America/Denver): " TIMEZONE
        if [ -n "${TIMEZONE}" ]; then
            break
        else
            echo "Timezone cannot be blank!"
        fi
    done

    # Configure the SSD with btrfs using a separate volume for home directories.
    mkfs.btrfs -f -L ${HOSTNAME} ${DEVICE}
    mount ${DEVICE} /mnt
    cd /mnt
    btrfs subvolume create main
    btrfs subvolume create main/root
    btrfs subvolume create main/home
    btrfs subvolume create snaps
    cd
    umount -R /mnt
    mount -o subvol=main/root ${DEVICE} /mnt
    mkdir /mnt/home
    mount -o subvol=main/home ${DEVICE} /mnt/home

    # Bootstrap the operating system.
    wget -qO - "https://www.archlinux.org/mirrorlist/?country=${COUNTRY}&protocol=http&ip_version=4&use_mirror_status=on" | \
        sed 's/^#Server/Server/' > /etc/pacman.d/mirrorlist
    pacstrap /mnt base
    genfstab -U -p /mnt >> /mnt/etc/fstab
    sed -i 's/relatime,ssd,space_cache/noatime,discard,ssd,autodefrag,compress=lzo,space_cache/' /mnt/etc/fstab
    mkdir /mnt/defvol
    printf "LABEL=${HOSTNAME} /mnt/defvol btrfs rw,noatime,discard,ssd,autodefrag,compress=lzo,space_cache 0 0" >> /mnt/etc/fstab
    cp -L -u `realpath $0` /mnt/root/bootstrap
    arch-chroot /mnt /bin/bash -c \
        "/root/bootstrap \"${DEVICE}\" \"${HOSTNAME}\" \"${ROOT_PASSWORD1}\" \"${USERNAME}\" \"${USER_PASSWORD1}\" \"${COUNTRY}\" \"${TIMEZONE}\""
    rm /mnt/root/bootstrap
    sync
    umount -R /mnt
    shutdown -r now

else
    DEVICE=${1}
    HOSTNAME=${2}
    ROOT_PASSWORD=${3}
    USERNAME=${4}
    USER_PASSWORD=${5}
    COUNTRY=${6}
    TIMEZONE=${7}

    # Standard boostrapping setup.
    echo ${HOSTNAME} > /etc/hostname
    ln -sf ${TIMEZONE} /etc/localtime
    sed -i '/^#en_US.UTF-8/s/^#//' /etc/locale.gen
    locale-gen
    echo "LANG=en_US.UTF-8" > /etc/locale.conf
    echo "KEYMAP=us" > /etc/vconsole.conf
    echo "FONT=lat9w-16" >> /etc/vconsole.conf
    hwclock --systohc --utc
    systemctl enable dhcpcd.service

    # I know this fails due to btrfs weirdness.
    set +e; mkinitcpio -p linux; set -e

    # Add the SolidFire package repository.
    curl -O http://bdr-jenkins.eng.solidfire.net/solidfire_signing_key.pub
    pacman-key --add solidfire_signing_key.pub
    rm solidfire_signing_key.pub
    pacman-key --lsign-key support@solidfire.com
    cat <<- 'EOF' >> /etc/pacman.conf
		[solidfire]
		Server = http://bdr-jenkins.eng.solidfire.net/archlinux/$repo/os/$arch
		EOF

    # Update and install the necessary packages.
    pacman --noconfirm -Syyu
    pacman --noconfirm -S base-devel grub git mercurial solidfire-dev
    pacman -Ss bashutils | grep "^s" | grep -v installed | grep -v "1.0.1-" | awk '{print $1}' | \
        xargs -I {} pacman --noconfirm -S {}

    # Configure non-root user and give all wheel users sudo access.
    useradd -m -G wheel -s /bin/bash ${USERNAME}
    echo "root:${ROOT_PASSWORD}" | chpasswd
    echo "${USERNAME}:${USER_PASSWORD}" | chpasswd
    sed -i '/^# %wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers
    
    # Configure bootloader.
    grub-install --target=i386-pc --recheck ${DEVICE}
    grub-mkconfig -o /boot/grub/grub.cfg
    
    # Stuff to get solidfire working.
    pacman --noconfirm -S dnsutils jre7-openjdk sudo sshpass python
    groupadd crontab
    cat <<- 'EOF' >> /etc/modules-load.d/solidfire.conf
		loop
		EOF
    cat <<- 'EOF' >> /etc/profile.d/solidfire.sh
		#!/bin/bash
		export PATH=$PATH:/bin:/sbin:/usr/sbin
		EOF
    chmod a+x /etc/profile.d/solidfire.sh
fi
